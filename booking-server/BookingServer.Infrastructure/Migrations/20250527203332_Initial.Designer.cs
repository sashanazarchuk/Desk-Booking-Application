// <auto-generated />
using System;
using BookingServer.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BookingServer.Infrastructure.Migrations
{
    [DbContext(typeof(BookingDbContext))]
    [Migration("20250527203332_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BookingServer.Domain.Entities.Amenity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("IconUrl")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Amenities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IconUrl = "https://example.com/icons/wifi.png",
                            Name = "Wi-Fi"
                        },
                        new
                        {
                            Id = 2,
                            IconUrl = "https://example.com/icons/coffee.png",
                            Name = "Coffee"
                        },
                        new
                        {
                            Id = 3,
                            IconUrl = "https://example.com/icons/game-room.png",
                            Name = "Game Room"
                        });
                });

            modelBuilder.Entity("BookingServer.Domain.Entities.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("RoomId")
                        .HasColumnType("integer");

                    b.Property<int>("SeatsBooked")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("Bookings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "alice@example.com",
                            EndDate = new DateTime(2025, 6, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Alice",
                            RoomId = 1,
                            SeatsBooked = 1,
                            StartDate = new DateTime(2025, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            Email = "bob@example.com",
                            EndDate = new DateTime(2025, 6, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Bob",
                            RoomId = 2,
                            SeatsBooked = 1,
                            StartDate = new DateTime(2025, 6, 3, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("BookingServer.Domain.Entities.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("integer");

                    b.Property<int>("RoomsCount")
                        .HasColumnType("integer");

                    b.Property<int>("WorkspaceId")
                        .HasColumnType("integer");

                    b.Property<int>("WorkspaceType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("WorkspaceId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Capacity = 24,
                            RoomsCount = 1,
                            WorkspaceId = 1,
                            WorkspaceType = 0
                        },
                        new
                        {
                            Id = 2,
                            Capacity = 1,
                            RoomsCount = 7,
                            WorkspaceId = 2,
                            WorkspaceType = 1
                        },
                        new
                        {
                            Id = 3,
                            Capacity = 2,
                            RoomsCount = 5,
                            WorkspaceId = 2,
                            WorkspaceType = 1
                        },
                        new
                        {
                            Id = 4,
                            Capacity = 10,
                            RoomsCount = 1,
                            WorkspaceId = 2,
                            WorkspaceType = 1
                        },
                        new
                        {
                            Id = 5,
                            Capacity = 10,
                            RoomsCount = 4,
                            WorkspaceId = 3,
                            WorkspaceType = 2
                        },
                        new
                        {
                            Id = 6,
                            Capacity = 20,
                            RoomsCount = 1,
                            WorkspaceId = 3,
                            WorkspaceType = 2
                        });
                });

            modelBuilder.Entity("BookingServer.Domain.Entities.Workspace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Workspaces");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "A vibrant shared area perfect for freelancers or small teams who enjoy a collaborative atmosphere. Choose any available desk and get to work with flexibility and ease.",
                            Name = "Open Space"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Ideal for focused work, video calls, or small team huddles. These fully enclosed rooms offer privacy and come in a variety of sizes to fit your needs.",
                            Name = "Private rooms"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Designed for productive meetings, workshops, or client presentations. Equipped with screens, whiteboards, and comfortable seating to keep your sessions running smoothly.",
                            Name = "Meeting rooms"
                        });
                });

            modelBuilder.Entity("BookingServer.Domain.Entities.WorkspaceAmenity", b =>
                {
                    b.Property<int>("WorkspaceId")
                        .HasColumnType("integer");

                    b.Property<int>("AmenityId")
                        .HasColumnType("integer");

                    b.HasKey("WorkspaceId", "AmenityId");

                    b.HasIndex("AmenityId");

                    b.ToTable("WorkspaceAmenities");

                    b.HasData(
                        new
                        {
                            WorkspaceId = 1,
                            AmenityId = 1
                        },
                        new
                        {
                            WorkspaceId = 1,
                            AmenityId = 2
                        },
                        new
                        {
                            WorkspaceId = 2,
                            AmenityId = 1
                        },
                        new
                        {
                            WorkspaceId = 3,
                            AmenityId = 2
                        });
                });

            modelBuilder.Entity("BookingServer.Domain.Entities.WorkspacePhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.Property<int>("WorkspaceId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("WorkspaceId");

                    b.ToTable("WorkspacePhotos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Url = "https://example.com/photos/workspace1.jpg",
                            WorkspaceId = 1
                        },
                        new
                        {
                            Id = 2,
                            Url = "https://example.com/photos/workspace1.jpg",
                            WorkspaceId = 1
                        },
                        new
                        {
                            Id = 3,
                            Url = "https://example.com/photos/workspace1.jpg",
                            WorkspaceId = 1
                        },
                        new
                        {
                            Id = 4,
                            Url = "https://example.com/photos/workspace2.jpg",
                            WorkspaceId = 2
                        },
                        new
                        {
                            Id = 5,
                            Url = "https://example.com/photos/workspace2.jpg",
                            WorkspaceId = 2
                        },
                        new
                        {
                            Id = 6,
                            Url = "https://example.com/photos/workspace2.jpg",
                            WorkspaceId = 2
                        },
                        new
                        {
                            Id = 7,
                            Url = "https://example.com/photos/workspace3.jpg",
                            WorkspaceId = 3
                        },
                        new
                        {
                            Id = 8,
                            Url = "https://example.com/photos/workspace3.jpg",
                            WorkspaceId = 3
                        },
                        new
                        {
                            Id = 9,
                            Url = "https://example.com/photos/workspace3.jpg",
                            WorkspaceId = 3
                        });
                });

            modelBuilder.Entity("BookingServer.Domain.Entities.Booking", b =>
                {
                    b.HasOne("BookingServer.Domain.Entities.Room", "Rooms")
                        .WithMany("Bookings")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("BookingServer.Domain.Entities.Room", b =>
                {
                    b.HasOne("BookingServer.Domain.Entities.Workspace", "Workspace")
                        .WithMany("Rooms")
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("BookingServer.Domain.Entities.WorkspaceAmenity", b =>
                {
                    b.HasOne("BookingServer.Domain.Entities.Amenity", "Amenity")
                        .WithMany("WorkspaceAmenities")
                        .HasForeignKey("AmenityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BookingServer.Domain.Entities.Workspace", "Workspace")
                        .WithMany("WorkspaceAmenities")
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Amenity");

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("BookingServer.Domain.Entities.WorkspacePhoto", b =>
                {
                    b.HasOne("BookingServer.Domain.Entities.Workspace", "Workspace")
                        .WithMany("Photos")
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("BookingServer.Domain.Entities.Amenity", b =>
                {
                    b.Navigation("WorkspaceAmenities");
                });

            modelBuilder.Entity("BookingServer.Domain.Entities.Room", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("BookingServer.Domain.Entities.Workspace", b =>
                {
                    b.Navigation("Photos");

                    b.Navigation("Rooms");

                    b.Navigation("WorkspaceAmenities");
                });
#pragma warning restore 612, 618
        }
    }
}
